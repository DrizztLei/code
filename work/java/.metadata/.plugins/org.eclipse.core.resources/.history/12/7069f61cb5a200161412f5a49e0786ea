package cluster;

import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Properties;

import edu.stanford.nlp.coref.docreader.CoNLLDocumentReader.NamedEntityAnnotation;
import edu.stanford.nlp.ling.CoreAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreAnnotations.PartOfSpeechAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations.TextAnnotation;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatchAction.AnnotateAction;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.pipeline.demo.StanfordCoreNlpDemo;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.process.DocumentPreprocessor;
import edu.stanford.nlp.process.PTBTokenizer;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.trees.TreeCoreAnnotations.TreeAnnotation;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.TypesafeMap.Key;

public class lexicalization
{

	public static void main(String[] args) throws IOException
	{
		/*

		for (String arg : args)
		{
			// option #1: By sentence.
			DocumentPreprocessor dp = new DocumentPreprocessor(arg);
			for (List<HasWord> sentence : dp)
			{
				System.out.println(sentence);
			}
			// option #2: By token
			PTBTokenizer<CoreLabel> ptbt = new PTBTokenizer<>(new FileReader(arg), new CoreLabelTokenFactory(), "");
			while (ptbt.hasNext())
			{
				CoreLabel label = ptbt.next();
				System.out.println(label);
			}
		}
		
		*/
		
		Properties pro = new Properties();
		pro.load(StanfordCoreNlpDemo.class.getResourceAsStream("StanfordCoreNLP-chinese.properties"));
		StanfordCoreNLP pipeline = new StanfordCoreNLP(pro);
		
		Annotation annotation = new Annotation("测试例子,在这里就只是单纯的测试,我们要做的项目的准确度为了这个斯坦福的工程.");
		pipeline.annotate(annotation);
		
		List<CoreMap> sentences = annotation.get(CoreAnnotations.SentencesAnnotation.class);
		sentences.get(CoreAnnotations.TokenEndAnnotation.class);
		List<CoreLabel> tokens = sentences.get(CoreAnnotations.TokensAnnotation.class);
		
		for(int i = 0; i < tokens.size(); i++)
		{
			System.out.println(tokens.get(i).getString(TextAnnotation.class).toString());
			System.out.println(tokens.get(i).getString(PartOfSpeechAnnotation.class).toString());
			// System.out.println(tokens.get(i).getString(NamedEntityAnnotation.class).toString());
		}
		
		Tree tree = sentences.get(TreeAnnotation.class);
		
		
	}
}