import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import javax.annotation.PostConstruct;

import com.google.gson.Gson;

public class skeletonKey {

	private final static PrintWriter pw = new PrintWriter(System.out, true);

	private final static String client_name = "elvis.linuxer@gmail.com";
	private final static String userid = "elvis.linuxer@gmail.com";
	private final static String client_id = "4yCOi48I687EN2Ix";
	private final static String client_secret = "1K742MBPCd5LAL24";
	private final static String access_token = "155bbd381a287e9b505e987379fa685e";
	private final static String kid = "d9b6073f-e334-49a6-af5c-e1b6e8516ae9";
	private final static String mac = "28-d9-8a-06-d2-41";
	private final static String prefix = "http://kk.bigk2.com:8080/KOAuthDemeter/";

	private static String getClientName() {
		return client_name;
	}

	private static String getUserID() {
		return userid;
	}

	private static String getClientID() {
		return client_id;
	}

	private static String getClientSecret() {
		return client_secret;
	}

	private static String getAccessToken() {
		return access_token;
	}

	private static String getKID() {
		return kid;
	}

	private static String getMAC() {
		return mac;
	}

	private static String getPrefix() {
		return prefix;
	}

	private final static String[] method = new String[42];
	static {
		method[0] = getPrefix();
		method[1] = getPrefix() + "User/getAvater";
		method[2] = getPrefix() + "User/getKList";
		method[3] = getPrefix() + "KControl/doSwitch";
		method[4] = getPrefix() + "KInfo/getKTimerList";
		method[5] = getPrefix() + "KInfo/getKElectricity";
		method[6] = getPrefix() + "KInfo/getKDelayOpenInfo";
		method[7] = getPrefix() + "KInfo/getKState";
		method[8] = getPrefix() + "User/getKInfo";
		method[9] = getPrefix() + "User/switchKLight";
		method[10] = getPrefix() + "User/getKLightInfo";
		method[11] = getPrefix() + "User/getKSceneList";
		method[12] = getPrefix() + "KInfo/getKDelayCloseInfo";
		method[13] = getPrefix() + "User/getGeneralRemoteList";
		method[14] = getPrefix() + "KControl/sendGeneralRemoteOrder";
		method[15] = getPrefix() + "User/getAirConditionerRemoteList";
		method[16] = getPrefix() + "KControl/sendAirConditionerOrder";
		method[17] = getPrefix() + "User/setTimerTask";
		method[18] = getPrefix() + "User/removeTimeTask";
		method[19] = getPrefix() + "User/setDelayTask";
		method[20] = getPrefix() + "User/removeDelayTask";
		method[21] = getPrefix() + "User/openChargingProtection";
		method[22] = getPrefix() + "User/closeChargingProtection";
		method[23] = getPrefix() + "KInfo/getSingleKStatus";
		method[24] = getPrefix() + "KInfo/getEnviromentInfo";
		method[25] = getPrefix() + "KInfo/getKHumanInfo";
		method[26] = getPrefix() + "KInfo/getKLatesHumanInfo";
		method[27] = getPrefix() + "User/uploadKSceneList";
		method[28] = getPrefix() + "KInfo/getKOnlineStatus";
		method[29] = getPrefix() + "KInfo/getKElectricityByMonth";
		method[30] = getPrefix() + "KInfo/getKElectricityByDay";
		method[31] = getPrefix() + "KInfo/getKElectricityByHour";
		method[32] = getPrefix() + "User/uploadSceneByIndex";
		method[33] = getPrefix() + "User/downloadSceneByIndex";
		method[34] = getPrefix() + "User/deleteSceneByIndex";
		method[35] = getPrefix() + "CheckAccessToken";
		method[36] = getPrefix() + "User/putLinkage";
		method[37] = getPrefix() + "User/getMultipleKOnlineStatus";
		method[38] = getPrefix() + "User/queryUserId";
		method[39] = getPrefix() + "User/verificateAccessToken";
		method[40] = getPrefix() + "KControl/enableWiFiBridge";
		method[41] = getPrefix() + "disableWiFiBridge";
	}

	private static PrintWriter getPrintWriter() {
		return pw;
	}

	private static String[] getMethod() {
		return method;
	}

	private static  String post(int methodIndex , String [] info) throws IOException
	{
		URL url = new URL(getMethod()[methodIndex]); // 创建连接

		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		
		connection.setDoOutput(true);
		connection.setDoInput(true);
		connection.setUseCaches(false);
		connection.setInstanceFollowRedirects(true);
		connection.setRequestMethod("POST"); // 设置请求方式
		connection.setRequestProperty("Accept", "application/json"); // 设置接收数据的格式
		connection.setRequestProperty("Content-Type", "application/json"); // 设置发送数据的格式
		connection.setRequestProperty("Accept-Encoding", "identity");
		connection.setRequestProperty("Authorization", "Bearer " + getAccessToken());

		connection.connect();

		RequestParamsBean params = new RequestParamsBean();

		params.setUserid(getUserID());
		params.setKid(getKID());

		String msg = new Gson().toJson(params);

		// 向服务器POST信息
		if (null != msg && msg.length() > 0) {
			OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), "UTF-8"); // 服务器采用UTF-8编码
			out.append(msg);
			out.flush();
			out.close();
		}

		// 读取服务器响应(最大长度10K)
		int length = 10 * 1024;
		// int length =connection.getContentLength();// 获取长度,这里一直返回0,不知道什么原因
		InputStream is = connection.getInputStream();
		if (length != -1) {
			byte[] data = new byte[length];
			byte[] temp = new byte[512];// 每次读取512字节
			int readLen = 0;// 单次读取的长度
			int destPos = 0;// 总字节数
			while ((readLen = is.read(temp)) > 0) {
				System.arraycopy(temp, 0, data, destPos, readLen);
				destPos += readLen;
			}
			String result = new String(data, "UTF-8"); // 响应也是UTF-8编码
			System.out.println("服务器返回结果：" + result);
		}
		return null;
	}

	public static void main(String[] args) {
		/*
		 * if(args.length == 0) { getPrintWriter().println(
		 * "error for parameter ."); System.exit(-1); }
		 */
		for (int i = 0; i < method.length; i++) {
			getPrintWriter().println(method[i]);
		}
	}
}
