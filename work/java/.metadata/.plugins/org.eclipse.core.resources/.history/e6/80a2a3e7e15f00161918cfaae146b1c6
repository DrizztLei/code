package Experiment;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

import com.philips.lighting.annotations.Bridge;
import com.philips.lighting.hue.listener.PHLightListener;
import com.philips.lighting.hue.sdk.PHAccessPoint;
import com.philips.lighting.hue.sdk.PHBridgeSearchManager;
import com.philips.lighting.hue.sdk.PHHueSDK;
import com.philips.lighting.hue.sdk.PHMessageType;
import com.philips.lighting.hue.sdk.PHSDKListener;
import com.philips.lighting.hue.sdk.heartbeat.PHHeartbeatManager;
import com.philips.lighting.model.PHBridge;
import com.philips.lighting.model.PHBridgeResource;
import com.philips.lighting.model.PHBridgeResourcesCache;
import com.philips.lighting.model.PHHueError;
import com.philips.lighting.model.PHHueParsingError;
import com.philips.lighting.model.PHLight;
import com.philips.lighting.model.PHLightState;

public class experiment_1 {
	public static final PHHueSDK philips = PHHueSDK.getInstance();
	public static List<PHLight> lights ;
	public static PHSDKListener listener = new PHSDKListener() {
		
		@Override
		public void onParsingErrors(List<PHHueParsingError> arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onError(int arg0, String arg1) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onConnectionResumed(PHBridge arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onConnectionLost(PHAccessPoint arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onCacheUpdated(List<Integer> arg0, PHBridge arg1) {
			// TODO Auto-generated method stub
			if (arg0.contains(PHMessageType.LIGHTS_CACHE_UPDATED)) {
				System.out.println("Lights Cache Updated ");
			}
		}

		@Override
		public void onBridgeConnected(PHBridge arg0, String arg1) {
			// TODO Auto-generated method stub
			System.out.println("on bridge connected");
			philips.setSelectedBridge(arg0);
			philips.enableHeartbeat(arg0, PHHueSDK.HB_INTERVAL);
			experiment_1.lights = philips.getSelectedBridge().getResourceCache().getAllLights();
			
			//System.out.println(lights.size());
			PHLightState lightState = new PHLightState();
			
			//lightState.setX((float) 23);
			//lightState.setY((float) 44);
			lightState.setHue(12345);
			//lightState.setBrightness();
			//lightState.setOn(true);
			//lightState.setOn(on);
			
			arg0.updateLightState(lights.get(0).getIdentifier(), lightState, null);
			
		}

		@Override
		public void onAuthenticationRequired(PHAccessPoint arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onAccessPointsFound(List<PHAccessPoint> arg0) {
			// TODO Auto-generated method stub
		}
	};

	public static void main(String[] args) {
		PHHueSDK philips = PHHueSDK.getInstance();
		philips.getNotificationManager().registerSDKListener(listener);
		PHBridgeSearchManager sm = (PHBridgeSearchManager) philips.getSDKService(PHHueSDK.SEARCH_BRIDGE);
		sm.search(true, true);
		PHAccessPoint accessPoint = new PHAccessPoint();
		accessPoint.setIpAddress("192.168.1.8");
		accessPoint.setUsername("pehNjKT6cdWEaSk-uC9T6c4mpw6ecI8kz2zyjRuY");
		philips.connect(accessPoint);

		/*
		 * PHBridge bridge = philips.getSelectedBridge();
		 * 
		 * List<PHLight> lights = bridge.getResourceCache().getAllLights();
		 * 
		 * System.out.println(lights.size());
		 * 
		 * philips.disableAllHeartbeat(); philips.destroySDK();
		 */
		/*
		 * PHHeartbeatManager beatManager = PHHeartbeatManager.getInstance();
		 * PHBridgeResourcesCache cache =
		 * philips.getSelectedBridge().getResourceCache(); List <PHLight> lights
		 * = cache.getAllLights(); PHBridge bridge =
		 * PHHueSDK.getInstance().getSelectedBridge(); PHLightState status = new
		 * PHLightState(); status.setHue(12345);
		 */

	}
}
