{"_id":"mqtt-connection","_rev":"15-efa7c08e4a6bb7a427323e753cb45e45","name":"mqtt-connection","description":"Stream-based Connection object for MQTT, extracted from MQTT.js","dist-tags":{"latest":"2.1.1"},"versions":{"1.0.0":{"name":"mqtt-connection","version":"1.0.0","description":"Legacy MqttConnection from MQTT.js, with no backpressure!","main":"connection.js","scripts":{"test":"mocha test/"},"repository":{"type":"git","url":"https://github.com/mcollina/mqtt-connection.git"},"keywords":["mqtt","connection","server"],"author":{"name":"Matteo Collina","email":"hello@matteocollina.com"},"license":"MIT","bugs":{"url":"https://github.com/mcollina/mqtt-connection/issues"},"homepage":"https://github.com/mcollina/mqtt-connection","dependencies":{"inherits":"^2.0.1","mqtt-packet":"^2.0.0","reduplexer":"^1.1.0"},"devDependencies":{"mocha":"^2.0.1","should":"^4.4.1","through2":"^0.6.3"},"gitHead":"18851b65ee5b48f3cfd32de4e955bf6ab6a2712f","_id":"mqtt-connection@1.0.0","_shasum":"65ad52afff6177f503e0eabea89e341ddd97422d","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"65ad52afff6177f503e0eabea89e341ddd97422d","tarball":"https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-1.0.0.tgz"},"directories":{}},"1.0.1":{"name":"mqtt-connection","version":"1.0.1","description":"Stream-based Connection object for MQTT, extracted from MQTT.js","main":"connection.js","scripts":{"test":"mocha test/"},"repository":{"type":"git","url":"https://github.com/mcollina/mqtt-connection.git"},"keywords":["mqtt","connection","server"],"author":{"name":"Matteo Collina","email":"hello@matteocollina.com"},"license":"MIT","bugs":{"url":"https://github.com/mcollina/mqtt-connection/issues"},"homepage":"https://github.com/mcollina/mqtt-connection","dependencies":{"inherits":"^2.0.1","mqtt-packet":"^2.0.0","reduplexer":"^1.1.0"},"devDependencies":{"mocha":"^2.0.1","should":"^4.4.1","through2":"^0.6.3"},"gitHead":"07215ea27905902ba6346c51b8775fcabe7c635f","_id":"mqtt-connection@1.0.1","_shasum":"d4bb52384bda5da991d95f65a0785d6964b6adb2","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"d4bb52384bda5da991d95f65a0785d6964b6adb2","tarball":"https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-1.0.1.tgz"},"directories":{}},"1.0.2":{"name":"mqtt-connection","version":"1.0.2","description":"Stream-based Connection object for MQTT, extracted from MQTT.js","main":"connection.js","scripts":{"test":"mocha test/"},"repository":{"type":"git","url":"https://github.com/mcollina/mqtt-connection.git"},"keywords":["mqtt","connection","server"],"author":{"name":"Matteo Collina","email":"hello@matteocollina.com"},"license":"MIT","bugs":{"url":"https://github.com/mcollina/mqtt-connection/issues"},"homepage":"https://github.com/mcollina/mqtt-connection","dependencies":{"inherits":"^2.0.1","mqtt-packet":"^2.0.0","reduplexer":"^1.1.0","through2":"^0.6.3"},"devDependencies":{"mocha":"^2.0.1","should":"^4.4.1"},"gitHead":"a817a20f62609d9e1fb8e39a4d10b34b2d1647d8","_id":"mqtt-connection@1.0.2","_shasum":"4c363debad6ff6b33b581b2b368e048b9e2d9082","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"4c363debad6ff6b33b581b2b368e048b9e2d9082","tarball":"https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-1.0.2.tgz"},"directories":{}},"1.0.3":{"name":"mqtt-connection","version":"1.0.3","description":"Stream-based Connection object for MQTT, extracted from MQTT.js","main":"connection.js","contributors":[{"name":"Matteo Collina","email":"matteo.collina@gmail.com","url":"https://github.com/mcollina"},{"name":"Adam Rudd","email":"adam.rudd@uqconnect.edu.au"}],"scripts":{"test":"mocha test/"},"repository":{"type":"git","url":"https://github.com/mqttjs/mqtt-connection.git"},"keywords":["mqtt","connection","server"],"license":"MIT","bugs":{"url":"https://github.com/mqttjs/mqtt-connection/issues"},"homepage":"https://github.com/mqttjs/mqtt-connection","dependencies":{"inherits":"^2.0.1","mqtt-packet":"^2.0.0","reduplexer":"^1.1.0","through2":"^0.6.3"},"devDependencies":{"mocha":"^2.0.1","should":"^4.4.1"},"gitHead":"fdbcaf2d822cf4a2de6a6dcc55d4eedd5be67e47","_id":"mqtt-connection@1.0.3","_shasum":"bc3e986feb85fa477523949da449f6c4864f2534","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"bc3e986feb85fa477523949da449f6c4864f2534","tarball":"https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-1.0.3.tgz"},"directories":{}},"2.0.0":{"name":"mqtt-connection","version":"2.0.0","description":"Stream-based Connection object for MQTT, extracted from MQTT.js","main":"connection.js","contributors":[{"name":"Matteo Collina","email":"matteo.collina@gmail.com","url":"https://github.com/mcollina"},{"name":"Adam Rudd","email":"adam.rudd@uqconnect.edu.au"}],"scripts":{"test":"mocha test/"},"repository":{"type":"git","url":"https://github.com/mqttjs/mqtt-connection.git"},"keywords":["mqtt","connection","server"],"license":"MIT","bugs":{"url":"https://github.com/mqttjs/mqtt-connection/issues"},"homepage":"https://github.com/mqttjs/mqtt-connection","dependencies":{"inherits":"^2.0.1","mqtt-packet":"^3.0.0","reduplexer":"^1.1.0","through2":"^0.6.3"},"devDependencies":{"mocha":"^2.0.1","should":"^4.4.1"},"gitHead":"fb0e5b843fc79ff809b2472424ac87aec9d0041c","_id":"mqtt-connection@2.0.0","_shasum":"70a53addef03661b3135038e082862baeaf95e8f","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"70a53addef03661b3135038e082862baeaf95e8f","tarball":"https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-2.0.0.tgz"},"directories":{}},"2.1.0":{"name":"mqtt-connection","version":"2.1.0","description":"Stream-based Connection object for MQTT, extracted from MQTT.js","main":"connection.js","contributors":[{"name":"Matteo Collina","email":"matteo.collina@gmail.com","url":"https://github.com/mcollina"},{"name":"Adam Rudd","email":"adam.rudd@uqconnect.edu.au"}],"scripts":{"test":"mocha test/"},"repository":{"type":"git","url":"https://github.com/mqttjs/mqtt-connection.git"},"keywords":["mqtt","connection","server"],"license":"MIT","bugs":{"url":"https://github.com/mqttjs/mqtt-connection/issues"},"homepage":"https://github.com/mqttjs/mqtt-connection","dependencies":{"inherits":"^2.0.1","mqtt-packet":"^3.0.0","reduplexer":"^1.1.0","through2":"^0.6.3"},"devDependencies":{"mocha":"^2.0.1","should":"^4.4.1"},"gitHead":"739de0feb27890e68543769ba3cfe5f0ec7cc469","_id":"mqtt-connection@2.1.0","_shasum":"f31368ad7d4f836fc4ac536539f39c932b3d7e0d","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"f31368ad7d4f836fc4ac536539f39c932b3d7e0d","tarball":"https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-2.1.0.tgz"},"directories":{}},"2.1.1":{"name":"mqtt-connection","version":"2.1.1","description":"Stream-based Connection object for MQTT, extracted from MQTT.js","main":"connection.js","contributors":[{"name":"Matteo Collina","email":"matteo.collina@gmail.com","url":"https://github.com/mcollina"},{"name":"Adam Rudd","email":"adamvrr@gmail.com"}],"scripts":{"test":"mocha test/"},"repository":{"type":"git","url":"https://github.com/mqttjs/mqtt-connection.git"},"keywords":["mqtt","connection","server"],"license":"MIT","bugs":{"url":"https://github.com/mqttjs/mqtt-connection/issues"},"homepage":"https://github.com/mqttjs/mqtt-connection","dependencies":{"inherits":"^2.0.1","mqtt-packet":"^3.0.0","reduplexer":"^1.1.0","through2":"^0.6.3"},"devDependencies":{"mocha":"^2.0.1","should":"^4.4.1"},"gitHead":"fe424bbc5075c6cf3908c056d38f59a9c5a5b6c3","_id":"mqtt-connection@2.1.1","_shasum":"7b2e985a74e196619430bebd35da162c34c4e56a","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"7b2e985a74e196619430bebd35da162c34c4e56a","tarball":"https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-2.1.1.tgz"},"directories":{}}},"readme":"mqtt-connection&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/mqttjs/mqtt-connection.png)](https://travis-ci.org/mqttjs/mqtt-connection)\n===============\n\nBarebone Connection object for MQTT.\nWorks over any kind of binary Streams, TCP, TLS, WebSocket, ...\n\nIt uses [mqtt-packet](http://npm.im/mqtt-packet) for generating and\nparsing MQTT packets. See it for the full documentations on the\npacket types.\n\n  * <a href=\"#install\">Install</a>\n  * <a href=\"#usage\">Usage</a>\n  * <a href=\"#api\">API</a>\n  * <a href=\"#contributing\">Contributing</a>\n  * <a href=\"#license\">Licence &amp; copyright</a>\n\nThis library works with node v0.10 and node v0.8, but it requires at\nleast NPM 1.4. To upgrade on node v0.8, run `npm install\nnpm@v1.4-latest -g`.\n\nInstall\n-------\n\n```sh\nnpm install mqtt-connection --save\n```\n\nUsage\n-----\n\nAs a client:\n\n```js\nvar net     = require('net')\n  , mqttCon = require('mqtt-connection')\n  , stream  = net.createConnection(1883, 'localhost')\n  , conn    = mqttCon(stream);\n\n// conn is your MQTT connection!\n\n```\n\nAs a server:\n```js\nvar net     = require('net')\n  , mqttCon = require('mqtt-connection')\n  , server  = new net.Server();\n\nserver.on('connection', function(stream) {\n  var conn = mqttCon(stream);\n\n  // conn is your MQTT connection!\n});\n```\n\nAs a websocket server:\n\n```js\nvar websocket = require('websocket-stream')\n  , WebSocketServer = require('ws').Server\n  , Connection = require('mqtt-connection')\n  , server = http.createServer()\n\nfunction attachWebsocketServer(server, handler) {\n  var wss = new WebSocketServer({server: server})\n\n  if (handler)\n    server.on('client', handler)\n\n  wss.on('connection', function(ws) {\n    var stream = websocket(ws)\n    var connection = new Connection(stream)\n\n    server.emit(\"client\", connection)\n  })\n\n  return server\n}\n\nattachWebsocketServer(server)\n```\n\nAPI\n---\n\n  * <a href=\"#connection\"><code>mqtt.<b>Connection()</b></code></a>\n  * <a href=\"#parseStream\"><code>mqtt.<b>parseStream()</b></code></a>\n  * <a href=\"#generateStream\"><code>mqtt.<b>parseStream()</b></code></a>\n\n---------------------------------\n\n<a name=\"connection\"></a>\n### new mqtt.Connection([options])\n\nCreates a new MQTT `Connection`.\n\nOptions:\n\n  * `notData`: do not listen to the `'data'` event, so that it can\n    respect backpressure. Pipe the `Connection` to another stream to\n    consume the packets. If this option is passed `true` the object will\n    emit no packet-related events.\n\n#### Connection#connect(options, [callback])\n\nSend an MQTT connect packet.\n\n`options` supports the following properties:\n\n* `protocolId`: Protocol ID, usually `MQIsdp`. `string`\n* `protocolVersion`: Protocol version, usually 3. `number`\n* `keepalive`: keepalive period in seconds. `number`\n* `clientId`: client ID. `string`\n* `will`: the client's will message options. \n`object` that supports the following properties:\n  * `topic`: the will topic. `string`\n  * `payload`: the will payload. `string`\n  * `qos`: will qos level. `number`\n  * `retain`: will retain flag. `boolean`\n* `clean`: the 'clean start' flag. `boolean`\n* `username`: username for protocol v3.1. `string`\n* `password`: password for protocol v3.1. `string`\n\n#### Connection#connack(options, [callback])\nSend an MQTT connack packet.\n\n`options` supports the following properties:\n\n* `returnCode`: the return code of the connack, success is\nindicated by `0`. `number`\n\n#### Connection#publish(options, [callback])\nSend an MQTT publish packet.\n\n`options` supports the following properties:\n\n* `topic`: the topic to publish to. `string`\n* `payload`: the payload to publish, defaults to an empty buffer. \n`string` or `buffer`\n* `qos`: the quality of service level to publish on. `number`\n* `messageId`: the message ID of the packet, \nrequired if qos > 0. `number`\n* `retain`: retain flag. `boolean`\n\n#### Connection#puback #pubrec #pubcomp #unsuback(options, [callback])\nSend an MQTT `[puback, pubrec, pubcomp, unsuback]` packet.\n\n`options` supports the following properties:\n\n* `messageId`: the ID of the packet\n\n#### Connection#pubrel(options, [callback])\nSend an MQTT pubrel packet.\n\n`options` supports the following properties:\n\n* `dup`: duplicate message flag\n* `messageId`: the ID of the packet\n\n#### Connection#subscribe(options, [callback])\nSend an MQTT subscribe packet.\n\n`options` supports the following properties:\n\n* `dup`: duplicate message flag\n* `messageId`: the ID of the packet\n* `subscriptions`: a list of subscriptions of the form \n`[{topic: a, qos: 0}, {topic: b, qos: 1}]` \n\n#### Connection#suback(options, [callback])\nSend an MQTT suback packet.\n\n`options` supports the following properties:\n\n* `granted`: a vector of granted QoS levels, \nof the form `[0, 1, 2]`\n* `messageId`: the ID of the packet\n\n#### Connection#unsubscribe(options, [callback])\nSend an MQTT unsubscribe packet.\n\n`options` supports the following properties:\n\n* `messageId`: the ID of the packet\n* `dup`: duplicate message flag\n* `unsubscriptions`: a list of topics to unsubscribe from, \nof the form `[\"topic1\", \"topic2\"]`\n\n#### Connection#pingreq #pingresp #disconnect(options, [callback])\nSend an MQTT `[pingreq, pingresp, disconnect]` packet.\n\n#### Event: 'connect'\n`function(packet) {}`\n\nEmitted when an MQTT connect packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `version`: the protocol version string\n* `versionNum`: the protocol version number\n* `keepalive`: the client's keepalive period\n* `clientId`: the client's ID\n* `will`: an object with the following keys:\n  * `topic`: the client's will topic\n  * `payload`: the will message\n  * `retain`: will retain flag\n  * `qos`: will qos level\n* `clean`: clean start flag\n* `username`: v3.1 username\n* `password`: v3.1 password\n\n#### Event: 'connack'\n`function(packet) {}`\n\nEmitted when an MQTT connack packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `returnCode`: the return code of the connack packet\n\n#### Event: 'publish'\n`function(packet) {}`\n\nEmitted when an MQTT publish packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `topic`: the topic the message is published on\n* `payload`: the payload of the message\n* `messageId`: the ID of the packet\n* `qos`: the QoS level to publish at\n\n#### Events: \\<'puback', 'pubrec', 'pubrel', 'pubcomp', 'unsuback'\\>\n`function(packet) {}`\n\nEmitted when an MQTT `[puback, pubrec, pubrel, pubcomp, unsuback]` \npacket is received by the client.\n\n`packet` is an object that may contain the property:\n\n* `messageId`: the ID of the packet\n\n#### Event: 'subscribe'\n`function(packet) {}`\n\nEmitted when an MQTT subscribe packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `subscriptions`: an array of objects \nrepresenting the subscribed topics, containing the following keys\n  * `topic`: the topic subscribed to\n  * `qos`: the qos level of the subscription\n\n\n#### Event: 'suback'\n`function(packet) {}`\n\nEmitted when an MQTT suback packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `granted`: a vector of granted QoS levels\n\n#### Event: 'unsubscribe'\n`function(packet) {}`\n\nEmitted when an MQTT unsubscribe packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `unsubscriptions`: a list of topics the client is \nunsubscribing from, of the form `[topic1, topic2, ...]`\n\n#### Events: \\<'pingreq', 'pingresp', 'disconnect'\\>\n`function(packet){}`\n\nEmitted when an MQTT `[pingreq, pingresp, disconnect]` packet is received.\n\n`packet` only includes static header information and can be ignored.\n\n-------------------------------------\n\n<a name=\"generateStream\">\n### mqtt.generateStream()\n\nReturns a `Transform` stream that calls [`generate()`](https://github.com/mqttjs/mqtt-packet#generate).\nThe stream is configured into object mode.\n\n<a name=\"parseStream\">\n### mqtt.parseStream(opts)\n\nReturns a `Transform` stream that embeds a [`Parser`](https://github.com/mqttjs/mqtt-packet#mqttparser) and calls [`Parser.parse()`](https://github.com/mqttjs/mqtt-packet#parserparsebuffer) for each new `Buffer`. The stream is configured into object mode. It accepts the same options of [`parser(opts)`](#parser).\n\n<a name=\"contributing\"></a>\nContributing\n------------\n\nmqtt-connection is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/mqttjs/mqtt-connection/blob/master/CONTRIBUTING.md) file for more details.\n\n### Contributors\n\nmqtt-packet is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Matteo Collina</th><td><a href=\"https://github.com/mcollina\">GitHub/mcollina</a></td><td><a href=\"http://twitter.com/matteocollina\">Twitter/@matteocollina</a></td></tr>\n<tr><th align=\"left\">Adam Rudd</th><td><a href=\"https://github.com/adamvr\">GitHub/adamvr</a></td><td><a href=\"http://twitter.com/adam_vr\">Twitter/@adam_vr</a></td></tr>\n</tbody></table>\n\nLicense\n-------\n\nMIT\n","maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"time":{"modified":"2015-01-13T09:28:07.937Z","created":"2014-12-19T11:16:51.866Z","1.0.0":"2014-12-19T11:16:51.866Z","1.0.1":"2014-12-19T11:18:34.656Z","1.0.2":"2014-12-23T23:42:18.015Z","1.0.3":"2015-01-08T22:30:05.792Z","2.0.0":"2015-01-09T17:53:47.580Z","2.1.0":"2015-01-09T23:32:13.263Z","2.1.1":"2015-01-13T09:28:07.937Z"},"homepage":"https://github.com/mqttjs/mqtt-connection","keywords":["mqtt","connection","server"],"repository":{"type":"git","url":"https://github.com/mqttjs/mqtt-connection.git"},"bugs":{"url":"https://github.com/mqttjs/mqtt-connection/issues"},"license":"MIT","readmeFilename":"README.md","contributors":[{"name":"Matteo Collina","email":"matteo.collina@gmail.com","url":"https://github.com/mcollina"},{"name":"Adam Rudd","email":"adamvrr@gmail.com"}],"users":{"bitsonic":true},"_attachments":{},"_etag":"\"64EXK0S4CT1CSDA1P0I0MY5NY\""}